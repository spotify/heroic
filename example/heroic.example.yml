port: 8080

# Cluster configuration.
cluster:
  discovery:
    type: static
    nodes:
      - grpc://localhost:9698
  protocols:
    - type: grpc
  tags:
    site: london

# Metrics configuration.
metrics:
  backends:
    # In-memory only
    - type: memory

# Metadata backend configuration.
metadata:
  backends:
    # ElasticSearch-based metadata.
    - type: elasticsearch
      connection:
        client:
          type: standalone
          seeds:
            - localhost:9200

# Data consumers.
consumers:
 - type: pubsub
   # Topic and subscription will be created within the project if they don't exist,
   # assuming Heroic has appropriate GCP permissions.
   project: heroic
   topic: metrics
   subscription: heroic-consumer
   schema: com.spotify.heroic.consumer.schemas.Spotify100

# Aggregation cache.
cache:
  backend:
    # In-memory based aggregation cache.
    type: memory

## Detailed Query Logging
#queryLogging:
#  type: slf4j

## Tracing configuration
tracing:
  # Probability, between 0.0 and 1.0, of sampling each trace.
  probability: 0.01 # @default 0.01

  # Local port to expose zpages on. Traces are accessible at http://localhost:{port}/tracez
  #zpagesPort: 9090 # @default empty

  lightstep:
  # Either a collectorHost or grpcCollectorTarget must be defined
  # GRPC Collector Target. Will distribute requests to all satellites returned by the DNS record
  #grpcCollectorTarget: "dns:///lightstep-satellite.example.com:8282"

  # Collector host running the lightstep satellite, will take priority over grpcCollectorTarget
  #collectorHost: "lightstep-satellite.example.com"
  # Collector port to be used in conjunction with the collector host
  #collectorPort: 8282 # @default 8282

  # Lightstep access token (required)
  accessToken: "lightstep_token"

  # Component name will set the "service" name in the Lightstep UI
  # componentName: heroic # @defaults heroic
  # Reporting interval (ms)
  #reportingIntervalMs: 1_000 # @default 1000
  # Max buffered spans
  #maxBufferedSpans: 1_000 # @default 1000
  # GRPC round robin between all hosts returned by grpcCollectorTarget
  #grpcRoundRobin: true # @default true
  # GRPC reset client
  #grpcResetClient: false # @default false
