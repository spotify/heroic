Index: heroic/suggest/elasticsearch/src/main/java/com/spotify/heroic/suggest/elasticsearch/ElasticsearchSuggestModule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- heroic/suggest/elasticsearch/src/main/java/com/spotify/heroic/suggest/elasticsearch/ElasticsearchSuggestModule.java	(revision 368796b06b54257cc0cb381375aa0b7ece9388e4)
+++ heroic/suggest/elasticsearch/src/main/java/com/spotify/heroic/suggest/elasticsearch/ElasticsearchSuggestModule.java	(date 1596915722841)
@@ -53,6 +53,7 @@
 import com.spotify.heroic.lifecycle.LifeCycle;
 import com.spotify.heroic.lifecycle.LifeCycleManager;
 import com.spotify.heroic.statistics.HeroicReporter;
+import com.spotify.heroic.suggest.NumSuggestionsLimits;
 import com.spotify.heroic.suggest.SuggestBackend;
 import com.spotify.heroic.suggest.SuggestModule;
 import dagger.Component;
@@ -95,7 +96,7 @@
     private final String distributedCacheSrvRecord;
     private final String templateName;
     private final boolean configure;
-    private final Integer numSuggestionsLimit;
+    private Map<String, Integer> numSuggestionsLimits;
 
     private static Supplier<BackendType> defaultSetup = SuggestBackendKV.factory();
 
@@ -126,7 +127,7 @@
         @JsonProperty("templateName") Optional<String> templateName,
         @JsonProperty("backendType") Optional<String> backendType,
         @JsonProperty("configure") Optional<Boolean> configure,
-        @JsonProperty("numSuggestionsLimit") Optional<Integer> numSuggestionsLimit
+        @JsonProperty("numSuggestionsLimits") Optional<Map<String, Integer>> numSuggestionsLimits
     ) {
         this.id = id;
         this.groups = groups.orElseGet(Groups::empty).or(DEFAULT_GROUP);
@@ -146,7 +147,8 @@
         this.type = backendType.map(this::lookupBackendType).orElse(defaultSetup);
         this.configure = configure.orElse(DEFAULT_CONFIGURE);
 
-        this.numSuggestionsLimit = numSuggestionsLimit.orElse(DEFAULT_NUM_SUGGESTIONS);
+        this.numSuggestionsLimits = numSuggestionsLimits
+            .orElseGet(NumSuggestionsLimits::emptyConfig);
     }
 
     private Supplier<BackendType> lookupBackendType(final String bt) {
@@ -214,9 +216,9 @@
 
         @Provides
         @ElasticsearchScope
-        @Named("numSuggestionsLimit")
-        public int numSuggestionsLimit(ExtraParameters params) {
-            return numSuggestionsLimit;
+        @Named("numSuggestionsLimits")
+        public Map<String, Integer> numSuggestionsLimits(ExtraParameters params) {
+            return numSuggestionsLimits;
         }
 
         @Provides
@@ -287,7 +289,7 @@
         private Optional<String> templateName = empty();
         private Optional<String> backendType = empty();
         private Optional<Boolean> configure = empty();
-        private Optional<Integer> numSuggestionsLimit = empty();
+        private Optional<Map<String, Integer>> numSuggestionsLimits = empty();
 
         public Builder id(final String id) {
             checkNotNull(id, "id");
@@ -358,8 +360,8 @@
             return this;
         }
 
-        public Builder numSuggestionsLimit(final Integer numSuggestionsLimit) {
-            this.numSuggestionsLimit = of(numSuggestionsLimit);
+        public Builder numSuggestionsLimits(final Map<String, Integer> numSuggestionsLimits) {
+            this.numSuggestionsLimits = of(numSuggestionsLimits);
             return this;
         }
 
@@ -377,7 +379,7 @@
                 templateName,
                 backendType,
                 configure,
-                numSuggestionsLimit);
+                numSuggestionsLimits);
         }
     }
 }
Index: heroic/suggest/memory/src/main/java/com/spotify/heroic/suggest/memory/MemorySuggestModule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- heroic/suggest/memory/src/main/java/com/spotify/heroic/suggest/memory/MemorySuggestModule.java	(revision 368796b06b54257cc0cb381375aa0b7ece9388e4)
+++ heroic/suggest/memory/src/main/java/com/spotify/heroic/suggest/memory/MemorySuggestModule.java	(date 1596915722857)
@@ -31,32 +31,34 @@
 import com.spotify.heroic.common.Groups;
 import com.spotify.heroic.common.ModuleId;
 import com.spotify.heroic.dagger.PrimaryComponent;
-import com.spotify.heroic.suggest.NumSuggestionsLimit;
+import com.spotify.heroic.suggest.NumSuggestionsLimits;
 import com.spotify.heroic.suggest.SuggestModule;
 import dagger.Component;
 import dagger.Module;
 import dagger.Provides;
+import java.util.Map;
 import java.util.Optional;
 
 @ModuleId("elasticsearch")
 public final class MemorySuggestModule implements SuggestModule, DynamicModuleId {
+
     private static final String DEFAULT_GROUP = "memory";
 
     private final Optional<String> id;
     private final Groups groups;
-    private final NumSuggestionsLimit numSuggestionsLimit;
+    private Map<String, Integer> numSuggestionsLimits;
+
 
     @JsonCreator
     public MemorySuggestModule(
         @JsonProperty("id") Optional<String> id,
         @JsonProperty("groups") Optional<Groups> groups,
-        @JsonProperty("numSuggestionsIntLimit") Optional<Integer> numSuggestionsIntLimit
+        @JsonProperty("numSuggestionsLimits") Optional<Map<String, Integer>> numSuggestionsLimits
     ) {
         this.id = id;
         this.groups = groups.orElseGet(Groups::empty).or(DEFAULT_GROUP);
-        this.numSuggestionsLimit = new NumSuggestionsLimit(
-            numSuggestionsIntLimit.orElse(NumSuggestionsLimit.DEFAULT_NUM_SUGGESTIONS_LIMIT));
-
+        this.numSuggestionsLimits = numSuggestionsLimits.orElseGet(
+            NumSuggestionsLimits::emptyConfig);
     }
 
     @Override
@@ -94,10 +96,11 @@
 
     @Module
     class O {
+
         @Provides
         @MemoryScope
-        public Integer numSuggestionsLimit() {
-            return numSuggestionsLimit.getLimit();
+        public Map<String, Integer> numSuggestionsLimits() {
+            return numSuggestionsLimits;
         }
     }
 
@@ -109,8 +112,7 @@
 
         private Optional<String> id = empty();
         private Optional<Groups> groups = empty();
-        private Optional<NumSuggestionsLimit> numSuggestionsLimit =
-            Optional.of(new NumSuggestionsLimit(NumSuggestionsLimit.DEFAULT_NUM_SUGGESTIONS_LIMIT));
+        private Optional<Map<String, Integer>> numSuggestionsLimits = empty();
 
         public Builder id(final String id) {
             checkNotNull(id, "id");
@@ -118,9 +120,9 @@
             return this;
         }
 
-        public Builder numSuggestionsLimit(final NumSuggestionsLimit numSuggestionsLimit) {
-            checkNotNull(numSuggestionsLimit, "numSuggestionsLimit");
-            this.numSuggestionsLimit = of(numSuggestionsLimit);
+        public Builder numSuggestionsLimits(final Map<String, Integer> numSuggestionsLimits) {
+            checkNotNull(numSuggestionsLimits, "numSuggestionsLimits");
+            this.numSuggestionsLimits = of(numSuggestionsLimits);
             return this;
         }
 
@@ -132,7 +134,7 @@
 
         public MemorySuggestModule build() {
             return new MemorySuggestModule(id, groups,
-                Optional.of(numSuggestionsLimit.get().getLimit()));
+                numSuggestionsLimits);
         }
     }
 }
Index: heroic/heroic-component/src/main/java/com/spotify/heroic/suggest/NumSuggestionsLimits.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- heroic/heroic-component/src/main/java/com/spotify/heroic/suggest/NumSuggestionsLimits.java	(date 1596915722833)
+++ heroic/heroic-component/src/main/java/com/spotify/heroic/suggest/NumSuggestionsLimits.java	(date 1596915722833)
@@ -0,0 +1,107 @@
+/*
+ * Copyright (c) 2015 Spotify AB.
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package com.spotify.heroic.suggest;
+
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * TODO
+ */
+public class NumSuggestionsLimits {
+
+    //
+//     public enum NumSuggestionsLimitType {
+//         KEYS,
+//         TAGS,
+//         TAG_VALUES
+//     }
+//
+    // OR***
+    public NumSuggestionsLimit keys = new NumSuggestionsLimit(DEFAULT_NUM_KEY_SUGGESTIONS_LIMIT);
+    public NumSuggestionsLimit tags = new NumSuggestionsLimit(DEFAULT_NUM_TAG_SUGGESTIONS_LIMIT);
+    public NumSuggestionsLimit tagValues = new NumSuggestionsLimit(
+        DEFAULT_NUM_TAG_VALUE_SUGGESTIONS_LIMIT);
+
+
+    /**
+     * How many suggestions we should request from ES.
+     *
+     * <p>This applies to the requests made for keys, tag and tag values. This defaults to 10,
+     * otherwise * 10,000 is used as the default which is wasteful and could lag the grafana UI.
+     */
+    public static final int DEFAULT_NUM_KEY_SUGGESTIONS_LIMIT = 10;
+    public static final int DEFAULT_NUM_TAG_SUGGESTIONS_LIMIT = 10;
+    public static final int DEFAULT_NUM_TAG_VALUE_SUGGESTIONS_LIMIT = 50;
+
+    public static final String KEYS_SUGGEST_LIMIT_NAME = "keys";
+    public static final String TAGS_SUGGEST_LIMIT_NAME = "tags";
+    public static final String TAG_VALUES_SUGGEST_LIMIT_NAME = "tagValues";
+
+    public NumSuggestionsLimits(Map<String, Integer> numSuggestionsLimits) {
+        numSuggestionsLimits.forEach((configPropertyKey, configPropertyValue) -> {
+            var limit = new NumSuggestionsLimit(configPropertyValue);
+
+            switch (configPropertyKey) {
+                case KEYS_SUGGEST_LIMIT_NAME:
+                    keys = limit;
+                    break;
+                case TAGS_SUGGEST_LIMIT_NAME:
+                    tags = limit;
+                    break;
+                case TAG_VALUES_SUGGEST_LIMIT_NAME:
+                    tags = limit;
+                    break;
+                default:
+                    throw new Exception(
+                        configPropertyKey + " - should instead be one of keys|tags|tagValues");
+            }
+        });
+    }
+
+    public static Map<String, Integer> emptyConfig() {
+        return new HashMap<String, Integer>();
+    }
+
+//
+//    public NumSuggestionsLimits() {
+//    }
+
+//    // ??? TODO
+//    public NumSuggestionsLimit getLimit(NumSuggestionsLimitType limitType)
+//    {
+//
+//    }
+//    // ??? TODO
+//    public NumSuggestionsLimits(NumSuggestionsLimitType limitType, int limit) {
+////    }
+//    public NumSuggestionsLimits(int limit1, int limit2, int limit3) {
+//        this.limit = limit;
+//    }
+
+//    // TODO WHAT WILL THE INTERFACE BE?
+//    public int getLimit() {
+//        return limit;
+//    }
+
+}
Index: heroic/suggest/elasticsearch/src/main/java/com/spotify/heroic/suggest/elasticsearch/SuggestBackendKV.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- heroic/suggest/elasticsearch/src/main/java/com/spotify/heroic/suggest/elasticsearch/SuggestBackendKV.java	(revision 368796b06b54257cc0cb381375aa0b7ece9388e4)
+++ heroic/suggest/elasticsearch/src/main/java/com/spotify/heroic/suggest/elasticsearch/SuggestBackendKV.java	(date 1596915721671)
@@ -58,7 +58,7 @@
 import com.spotify.heroic.statistics.FutureReporter;
 import com.spotify.heroic.statistics.SuggestBackendReporter;
 import com.spotify.heroic.suggest.KeySuggest;
-import com.spotify.heroic.suggest.NumSuggestionsLimit;
+import com.spotify.heroic.suggest.NumSuggestionsLimits;
 import com.spotify.heroic.suggest.SuggestBackend;
 import com.spotify.heroic.suggest.TagKeyCount;
 import com.spotify.heroic.suggest.TagKeyCount.Suggestion;
@@ -125,7 +125,7 @@
 public class SuggestBackendKV extends AbstractElasticsearchBackend
     implements SuggestBackend, Grouped, LifeCycles {
 
-    protected NumSuggestionsLimit numSuggestionsLimit = new NumSuggestionsLimit();
+    protected NumSuggestionsLimits numSuggestionsLimits = new NumSuggestionsLimits();
     private final Tracer tracer = Tracing.getTracer();
     private static final String WRITE_CACHE_SIZE = "write-cache-size";
 
@@ -174,14 +174,14 @@
         final RateLimitedCache<Pair<String, HashCode>> writeCache,
         final Groups groups,
         @Named("configure") boolean configure,
-        @Named("numSuggestionsLimit") Integer numSuggestionsLimit) {
+        @Named("numSuggestionsLimits") Map<String, Integer> numSuggestionsLimits) {
         super(async);
         this.connection = connection;
         this.reporter = reporter;
         this.writeCache = writeCache;
         this.groups = groups;
         this.configure = configure;
-        this.numSuggestionsLimit = new NumSuggestionsLimit(numSuggestionsLimit);
+        this.numSuggestionsLimits = new NumSuggestionsLimits(numSuggestionsLimits);
     }
 
     @Override
@@ -227,7 +227,7 @@
 
                 // use this.numSuggestionsLimit unless request.limit has been set.
                 final int numSuggestionsLimit =
-                    this.numSuggestionsLimit.updateAndGetLimit(request.getLimit());
+                    this.numSuggestionsLimits.updateAndGetLimit(request.getLimit());
 
                 searchRequest.source().query(query).timeout(TIMEOUT);
 
@@ -239,7 +239,7 @@
 
                 return future.directTransform(
                     (SearchResponse response) -> {
-                        return createTagValuesSuggest(this.numSuggestionsLimit.asOptionalLimit(),
+                        return createTagValuesSuggest(this.numSuggestionsLimits.asOptionalLimit(),
                             groupLimit, response);
                     });
             });
@@ -269,7 +269,7 @@
 
                 SearchRequest searchRequest = c.getIndex().search(TAG_TYPE);
 
-                final int numSuggestionsLimit = this.numSuggestionsLimit
+                final int numSuggestionsLimit = this.numSuggestionsLimits
                     .updateAndGetLimit(request.getLimit());
                 searchRequest.source().size(numSuggestionsLimit).query(query);
 
@@ -278,7 +278,7 @@
                 final ResolvableFuture<SearchResponse> future = async.future();
                 c.execute(searchRequest, bind(future));
 
-                final var optionalNumSuggestionsLimit = this.numSuggestionsLimit.asOptionalLimit();
+                final var optionalNumSuggestionsLimit = this.numSuggestionsLimits.asOptionalLimit();
 
                 return future.directTransform(
                     (SearchResponse response) -> {
@@ -343,7 +343,7 @@
 
                 SearchRequest searchRequest = c.getIndex().search(SERIES_TYPE);
 
-                searchRequest.source().size(numSuggestionsLimit
+                searchRequest.source().size(numSuggestionsLimits
                     .updateAndGetLimit(request.getLimit())).query(query);
 
                 // aggregation
@@ -907,7 +907,7 @@
 
         final TermsAggregationBuilder terms =
             AggregationBuilders.terms(term).field(tagKv)
-                .size(numSuggestionsLimit.updateAndGetLimit(limit))
+                .size(numSuggestionsLimits.updateAndGetLimit(limit))
                 .subAggregation(hits);
 
         searchRequest.source().aggregation(terms);
